% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pField.R
\name{pField}
\alias{pField}
\title{Create a pField object}
\source{
Function copied from "proxytype.R" in paleolibary/src/
}
\usage{
pField(data = NULL, time = 1, lat = NA, lon = NA, name = "",
  history = "", date = TRUE, kTol = 1/400)
}
\arguments{
\item{data}{input data, usually a three-dimensional gridded data array. If
\code{NULL}, or a single value, an empty data array, or a data array filled
with the single value, is created with dimensions according to the
information (i.e., lengths) in \code{time}, \code{lat} and \code{lon}.}

\item{time}{vector of observation time points, must be equidistant.}

\item{lat}{vector of latitudes.}

\item{lon}{vector of longitudes.}

\item{name}{character string with the name of the \code{"pField"} object to
be generated.}

\item{history}{character string to append to the history attribute of the
\code{"pField"} object (optional).}

\item{date}{logical, whether or not to append the current date to the
history attribute; defaults to \code{TRUE}.}

\item{kTol}{tolerance to check for equidistance of time steps; defaults to
1/400.}
}
\value{
A two-dimensional array of class \code{"pField"}.
}
\description{
This function takes supplied vectors of time points, latitudes and
longitudes to convert, or create, a three-dimensional gridded data array
into a \code{"pField"} object.
}
\details{
For a supplied gridded data array, the function shapes the data array into a
two-dimensional array with columns corresponding to the spatial dimension
(latitude-longitude pair) and rows corresponding to the time points of the
observations, i.e. similar to the structure of netcdf files. For this, the
total number of observation points in \code{data} must match the product of
the lengths of \code{time}, \code{lat} and \code{lon}. Each time series at
a spatial location is converted to a time series \code{\link[stats]{ts}}
object; and longitudes and latitudes are added to the new array as
attributes. If no input array is supplied, an empty three-dimensional
gridded data array is created from the information provided in \code{time},
\code{lat} and \code{lon}, and converted in a similar manner to a 2D
\code{"pField"} object.
}
\examples{
# Create an empty pfield object covering two latitudes, three longitudes and
# four time steps:

lat <- c(-75, -80)
lon <- c(0, 135, 215)
time <- 1 : 4

pf1 <- pField(lat = lat, lon = lon, time = time)

# Now fill the object with data:
# the important assumption is that the order of observations follows
# increments first along longitudes, then along latitudes, and finally along
# time (structure of netcdf files). Here, we let the values increase with
# latitude and time only:

space <- c(1, 1, 1, 2, 2, 2)
spacetime <- c(space, 10 * space, 100 * space, 1000 * space)

pf2 <- pField(data = spacetime, lat = lat, lon = lon, time = time)

# Note that in this case, the number of data points must match the number of
# observations defined by lat, lon and time:

\dontrun{
x <- pField(data = spacetime, lat = -75, lon = lon, time = time)
}

# Since R starts to read any array along its first dimension, all of the
# following array shapes are identical with respect to the pfield object
# created:

# i) Matrix with rows corresponding to space and columns to time
data <- spacetime
dim(data) <- c(6, 4)
pf3 <- pField(data, lat = lat, lon = lon, time = time)

# ii) Vice versa
data <- spacetime
dim(data) <- c(4, 6)
pf4 <- pField(data, lat = lat, lon = lon, time = time)

# iii) Array with first dimension being longitude, second dimension being
#      latitude, and third dimension being time:
data <- spacetime
dim(data) <- c(3, 2, 4)
pf5 <- pField(data, lat = lat, lon = lon, time = time)

# However, note that if you change the order of observations in the input,
# the resulting pfield object will be different from the above examples!

data <- spacetime
dim(data) <- c(6, 4)
data <- t(data) # order of observations changes

pf.different <- pField(data, lat = lat, lon = lon, time = time)
}
\author{
Thomas Laepple; adapated by Thomas MÃ¼nch
}
